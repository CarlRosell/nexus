// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`dynamicInputMethod should provide a method on the input definition 1`] = `
Array [
  "/Users/tgriesser/Github/oss/nexus/nexus/tests/schema.graphql",
  "### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


\\"\\"\\"
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
\`date-time\` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
\\"\\"\\"
scalar DateTime

type Query {
  ok: Boolean!
}

input SomeInput {
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
}
",
]
`;

exports[`dynamicInputMethod should provide a method on the input definition 2`] = `
Array [
  "/Users/tgriesser/Github/oss/nexus/nexus/tests/test-output.ts",
  "/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */


import { core } from \\"nexus\\"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    timestamps(...args: any): void
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  SomeInput: { // input type
    createdAt?: Date | null; // DateTime
    id?: string | null; // ID
    updatedAt?: Date | null; // DateTime
  }
}

export interface NexusGenEnums {
}

export interface NexusGenRootTypes {
  Query: {};
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  DateTime: Date;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  SomeInput: NexusGenInputs['SomeInput'];
}

export interface NexusGenFieldTypes {
  Query: { // field return type
    ok: boolean; // Boolean!
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = \\"Query\\";

export type NexusGenInputNames = \\"SomeInput\\";

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = \\"Boolean\\" | \\"DateTime\\" | \\"Float\\" | \\"ID\\" | \\"Int\\" | \\"String\\";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}",
]
`;

exports[`dynamicOutputMethod CollectionMethod example 1`] = `
Array [
  "/Users/tgriesser/Github/oss/nexus/nexus/tests/schema.graphql",
  "### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Cat {
  id: ID!
  name: String!
}

type CatCollection {
  nodes: [Cat!]!
  totalCount: Int!
}

type Query {
  cats(page: Int, perPage: Int): CatCollection!
}
",
]
`;

exports[`dynamicOutputMethod CollectionMethod example 2`] = `
Array [
  "/Users/tgriesser/Github/oss/nexus/nexus/tests/test-output",
  "/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */


import { core } from \\"nexus\\"

declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    collectionField<FieldName extends string>(fieldName: FieldName, opts: {
      type: NexusGenObjectNames | NexusGenInterfaceNames | core.NexusObjectTypeDef<string> | core.NexusInterfaceTypeDef<string>,
      nodes: core.SubFieldResolver<TypeName, FieldName, \\"nodes\\">,
      totalCount: core.SubFieldResolver<TypeName, FieldName, \\"totalCount\\">,
      args?: core.ArgsRecord,
      nullable?: boolean,
      description?: string
    }): void;
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenRootTypes {
  Cat: { // root type
    id: string; // ID!
    name: string; // String!
  }
  CatCollection: { // root type
    nodes: NexusGenRootTypes['Cat'][]; // [Cat!]!
    totalCount: number; // Int!
  }
  Query: {};
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
}

export interface NexusGenFieldTypes {
  Cat: { // field return type
    id: string; // ID!
    name: string; // String!
  }
  CatCollection: { // field return type
    nodes: NexusGenRootTypes['Cat'][]; // [Cat!]!
    totalCount: number; // Int!
  }
  Query: { // field return type
    cats: NexusGenRootTypes['CatCollection']; // CatCollection!
  }
}

export interface NexusGenArgTypes {
  Query: {
    cats: { // args
      page?: number | null; // Int
      perPage?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = \\"Cat\\" | \\"CatCollection\\" | \\"Query\\";

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = \\"Boolean\\" | \\"Float\\" | \\"ID\\" | \\"Int\\" | \\"String\\";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}",
]
`;

exports[`dynamicOutputMethod CollectionMethod example 3`] = `
Object {
  "data": Object {
    "cats": Object {
      "nodes": Array [
        Object {
          "id": "Cat:1",
          "name": "Felix",
        },
        Object {
          "id": "Cat:2",
          "name": "Booker",
        },
      ],
      "totalCount": 2,
    },
  },
}
`;

exports[`dynamicOutputMethod RelayConnectionMethod example 1`] = `
Array [
  "/Users/tgriesser/Github/oss/nexus/nexus/tests/schema.graphql",
  "### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Cat {
  id: ID!
  name: String!
}

type CatEdge {
  cursor: ID!
  node: Cat!
}

type CatRelayConnection {
  edges: [CatEdge!]!
  pageInfo: ConnectionPageInfo!
}

type ConnectionPageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type Query {
  cats(after: String, before: String, first: Int, last: Int): CatRelayConnection!
}
",
]
`;

exports[`dynamicOutputMethod RelayConnectionMethod example 2`] = `
Array [
  "/Users/tgriesser/Github/oss/nexus/nexus/tests/test-output.ts",
  "/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */


import { core } from \\"nexus\\"

declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    relayConnectionField
    <FieldName extends string>(fieldName: FieldName, opts: {
      type: NexusGenObjectNames | NexusGenInterfaceNames | core.NexusObjectTypeDef<string> | core.NexusInterfaceTypeDef<string>,
      edges: core.SubFieldResolver<TypeName, FieldName, \\"edges\\">,
      pageInfo: core.SubFieldResolver<TypeName, FieldName, \\"pageInfo\\">,
      args?: Record<string, core.NexusArgDef<string>>,
      nullable?: boolean,
      description?: string
    }): void
  
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenRootTypes {
  Cat: { // root type
    id: string; // ID!
    name: string; // String!
  }
  CatEdge: { // root type
    cursor: string; // ID!
    node: NexusGenRootTypes['Cat']; // Cat!
  }
  CatRelayConnection: { // root type
    edges: NexusGenRootTypes['CatEdge'][]; // [CatEdge!]!
    pageInfo: NexusGenRootTypes['ConnectionPageInfo']; // ConnectionPageInfo!
  }
  ConnectionPageInfo: { // root type
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
  }
  Query: {};
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
}

export interface NexusGenFieldTypes {
  Cat: { // field return type
    id: string; // ID!
    name: string; // String!
  }
  CatEdge: { // field return type
    cursor: string; // ID!
    node: NexusGenRootTypes['Cat']; // Cat!
  }
  CatRelayConnection: { // field return type
    edges: NexusGenRootTypes['CatEdge'][]; // [CatEdge!]!
    pageInfo: NexusGenRootTypes['ConnectionPageInfo']; // ConnectionPageInfo!
  }
  ConnectionPageInfo: { // field return type
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
  }
  Query: { // field return type
    cats: NexusGenRootTypes['CatRelayConnection']; // CatRelayConnection!
  }
}

export interface NexusGenArgTypes {
  Query: {
    cats: { // args
      after?: string | null; // String
      before?: string | null; // String
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = \\"Cat\\" | \\"CatEdge\\" | \\"CatRelayConnection\\" | \\"ConnectionPageInfo\\" | \\"Query\\";

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = \\"Boolean\\" | \\"Float\\" | \\"ID\\" | \\"Int\\" | \\"String\\";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}",
]
`;

exports[`dynamicOutputMethod RelayConnectionMethod example 3`] = `
Object {
  "data": Object {
    "cats": Object {
      "edges": Array [
        Object {
          "node": Object {
            "id": "Cat:1",
            "name": "Felix",
          },
        },
        Object {
          "node": Object {
            "id": "Cat:2",
            "name": "Booker",
          },
        },
      ],
      "pageInfo": Object {
        "hasNextPage": false,
        "hasPreviousPage": false,
      },
    },
  },
}
`;

exports[`dynamicOutputProperty should provide a way for adding a chainable api on the output definition 1`] = `
Array [
  "/Users/tgriesser/Github/oss/nexus/nexus/tests/schema.graphql",
  "### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


\\"\\"\\"
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
\`date-time\` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
\\"\\"\\"
scalar DateTime

type DynamicPropObject {
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
}

type Query {
  ok: Boolean!
}
",
]
`;

exports[`dynamicOutputProperty should provide a way for adding a chainable api on the output definition 2`] = `
Array [
  "/Users/tgriesser/Github/oss/nexus/nexus/tests/test-output.ts",
  "/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */






declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenRootTypes {
  DynamicPropObject: { // root type
    createdAt: Date; // DateTime!
    id: string; // ID!
    updatedAt: Date; // DateTime!
  }
  Query: {};
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  DateTime: Date;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
}

export interface NexusGenFieldTypes {
  DynamicPropObject: { // field return type
    createdAt: Date; // DateTime!
    id: string; // ID!
    updatedAt: Date; // DateTime!
  }
  Query: { // field return type
    ok: boolean; // Boolean!
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = \\"DynamicPropObject\\" | \\"Query\\";

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = \\"Boolean\\" | \\"DateTime\\" | \\"Float\\" | \\"ID\\" | \\"Int\\" | \\"String\\";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}",
]
`;
