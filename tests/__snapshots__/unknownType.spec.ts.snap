// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`unknownType should render the typegen but throw in the next-tick 1`] = `
Array [
  "/Users/tgriesser/Github/oss/nexus/nexus/tests/test.graphql",
  "### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type CustomUserName {
  id: ID!
  name: String!
}

\\"\\"\\"
This scalar should never make it into production. It is used as a placeholder
for situations where GraphQL Nexus encounters a missing type. We don't want to 
error immedately, otherwise the TypeScript definitions will not be updated.
\\"\\"\\"
scalar NEXUS__UNKNOWN__TYPE

type Query {
  user: CustomUserName!
  user2: NEXUS__UNKNOWN__TYPE!
}
",
]
`;

exports[`unknownType should render the typegen but throw in the next-tick 2`] = `
Array [
  "/Users/tgriesser/Github/oss/nexus/nexus/tests/test.ts",
  "/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */






declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenRootTypes {
  CustomUserName: { // root type
    id: string; // ID!
    name: string; // String!
  }
  Query: {};
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
}

export interface NexusGenFieldTypes {
  CustomUserName: { // field return type
    id: string; // ID!
    name: string; // String!
  }
  Query: { // field return type
    user: NexusGenRootTypes['CustomUserName']; // CustomUserName!
    user2: never; // NEXUS__UNKNOWN__TYPE!
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = \\"CustomUserName\\" | \\"Query\\";

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = \\"Boolean\\" | \\"Float\\" | \\"ID\\" | \\"Int\\" | \\"String\\";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}",
]
`;
