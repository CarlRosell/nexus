/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */

import * as swapi from "./types/backingTypes"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  Episode: 4 | 5 | 6
  MoreEpisodes: 4 | 5 | 6 | "OTHER"
}

export interface NexusGenRootTypes {
  Droid: swapi.Droid;
  Human: swapi.Human;
  Query: {};
  Character: swapi.Character;
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  Episode: NexusGenEnums['Episode'];
  MoreEpisodes: NexusGenEnums['MoreEpisodes'];
}

export interface NexusGenFieldTypes {
  Droid: { // field return type
    id: string; // String!
    name: string; // String!
    friends: NexusGenRootTypes['Character'][]; // [Character!]!
    appearsIn: NexusGenEnums['Episode'][]; // [Episode!]!
    primaryFunction: string; // String!
  }
  Human: { // field return type
    id: string; // String!
    name: string; // String!
    friends: NexusGenRootTypes['Character'][]; // [Character!]!
    appearsIn: NexusGenEnums['Episode'][]; // [Episode!]!
    homePlanet: string | null; // String
  }
  Query: { // field return type
    hero: NexusGenRootTypes['Character']; // Character!
    human: NexusGenRootTypes['Human']; // Human!
    droid: NexusGenRootTypes['Droid']; // Droid!
  }
  Character: { // field return type
    id: string; // String!
    name: string; // String!
    friends: NexusGenRootTypes['Character'][]; // [Character!]!
    appearsIn: NexusGenEnums['Episode'][]; // [Episode!]!
  }
}

export interface NexusGenArgTypes {
  Droid: {
    appearsIn: { // args
      id: string; // ID!
    }
  }
  Human: {
    appearsIn: { // args
      id: string; // ID!
    }
  }
  Query: {
    hero: { // args
      episode?: NexusGenEnums['Episode'] | null; // Episode
    }
    human: { // args
      id: string; // String!
    }
    droid: { // args
      id: string; // String!
    }
  }
  Character: {
    appearsIn: { // args
      id: string; // ID!
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
  Character: "Human" | "Droid"
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Droid" | "Human" | "Query";

export type NexusGenInputNames = never;

export type NexusGenEnumNames = "Episode" | "MoreEpisodes";

export type NexusGenInterfaceNames = "Character";

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: swapi.ContextType;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


import { core } from 'nexus'; 
import { GraphQLResolveInfo } from 'graphql';
export type AuthorizeResolver<
  TypeName extends string,
  FieldName extends string
> = (
  root: core.RootValue<TypeName>,
  args: core.ArgsValue<TypeName, FieldName>,
  context: core.GetGen<"context">,
  info: GraphQLResolveInfo
) => core.PromiseOrValue<boolean | Error>;
  
declare global {
  interface NexusAugmentedSchemaConfig {
  }
  interface NexusAugmentedTypeConfig<TypeName extends string> {
    description: string;
  }
  interface NexusAugmentedFieldConfig<TypeName extends string, FieldName extends string> {
    
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field. Returning
     * or throwing an error will also prevent the resolver from
     * executing.
     */  
    authorize?: AuthorizeResolver<TypeName, FieldName>
      
    description: string;
  }
}